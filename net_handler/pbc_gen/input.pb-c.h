/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: input.proto */

#ifndef PROTOBUF_C_input_2eproto__INCLUDED
#define PROTOBUF_C_input_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
#error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
#error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Input Input;
typedef struct _UserInputs UserInputs;


/* --- enums --- */

typedef enum _Source {
    SOURCE__GAMEPAD = 0,
    SOURCE__KEYBOARD = 1 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SOURCE)
} Source;

/* --- messages --- */

struct _Input {
    ProtobufCMessage base;
    protobuf_c_boolean connected;
    uint64_t buttons;
    size_t n_axes;
    float* axes;
    Source source;
};
#define INPUT__INIT                                 \
    {                                               \
        PROTOBUF_C_MESSAGE_INIT(&input__descriptor) \
        , 0, 0, 0, NULL, SOURCE__GAMEPAD            \
    }


struct _UserInputs {
    ProtobufCMessage base;
    size_t n_inputs;
    Input** inputs;
};
#define USER_INPUTS__INIT                                 \
    {                                                     \
        PROTOBUF_C_MESSAGE_INIT(&user_inputs__descriptor) \
        , 0, NULL                                         \
    }


/* Input methods */
void input__init(Input* message);
size_t input__get_packed_size(const Input* message);
size_t input__pack(const Input* message,
                   uint8_t* out);
size_t input__pack_to_buffer(const Input* message,
                             ProtobufCBuffer* buffer);
Input*
input__unpack(ProtobufCAllocator* allocator,
              size_t len,
              const uint8_t* data);
void input__free_unpacked(Input* message,
                          ProtobufCAllocator* allocator);
/* UserInputs methods */
void user_inputs__init(UserInputs* message);
size_t user_inputs__get_packed_size(const UserInputs* message);
size_t user_inputs__pack(const UserInputs* message,
                         uint8_t* out);
size_t user_inputs__pack_to_buffer(const UserInputs* message,
                                   ProtobufCBuffer* buffer);
UserInputs*
user_inputs__unpack(ProtobufCAllocator* allocator,
                    size_t len,
                    const uint8_t* data);
void user_inputs__free_unpacked(UserInputs* message,
                                ProtobufCAllocator* allocator);
/* --- per-message closures --- */

typedef void (*Input_Closure)(const Input* message,
                              void* closure_data);
typedef void (*UserInputs_Closure)(const UserInputs* message,
                                   void* closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor source__descriptor;
extern const ProtobufCMessageDescriptor input__descriptor;
extern const ProtobufCMessageDescriptor user_inputs__descriptor;

PROTOBUF_C__END_DECLS


#endif /* PROTOBUF_C_input_2eproto__INCLUDED */
